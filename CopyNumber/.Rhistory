DP=c(1,2,3,4,5,6)
NV=c(1,2,3,4,5,6)
segment_id=c(1,1,1,2,3,3)
accepted_idx=c(1,3)
DP[accepted_idx]
segment_id[accepted_idx]
accepted_mutations <- data.frame(DP = DP[accepted_idx], NV = NV[accepted_idx], segment_id=segment_id[accepted_idx])
accepted_mutations
accepted_idx=c(1,3,4)
accepted_mutations <- data.frame(DP = DP[accepted_idx], NV = NV[accepted_idx], segment_id=segment_id[accepted_idx])
accepted_mutations
nrow(table(accepted_mutations$segment_id))
(table(accepted_mutations$segment_id))
table(accepted_mutations$segment_id)
at_least_two_per_category <- all(counts >= 2)
counts <- table(accepted_mutations$segment_id)
at_least_two_per_category <- all(counts >= 2)
at_least_two_per_category
getwd()
cd ../
setwd("C:/Users/sarac/CDS/CopyNumber/")
gc()
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
number_events=2
vector_tau<-c(0.01,0.9)
vector_karyo<-c("2:0")
weignths_tau<-c(0.5,0.5) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(1)
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
# fit with a specific number of K
input_data_1 <- prepare_input_data(data_sim, data$karyo, K=1, purity=0.99)
res_1 <- fit_variational(input_data, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# fit with a specific number of K
input_data_1 <- prepare_input_data(data_sim, data$karyo, K=1, purity=0.99)
res_1 <- fit_variational(input_data, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
input_data_1 <- prepare_input_data(data_sim, data$karyo, K=1, purity=0.99)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
input_data_1 <- prepare_input_data(data_sim, data$karyo, K=1, purity=0.99)
input_data_1 <- prepare_input_data(data_sim, data$karyo, K=1, purity=0.99)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res,input_data,1)
p_1 <- plotting(res_1,input_data,1)
p_1
p_1 <- plotting(res_1,input_data_1,1)
p_1
