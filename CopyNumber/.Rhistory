getwd()
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
source("./CNTiming/R/simulate_functions.R")
setwd("C:/scratch/CDS_ORFEO/Timing_CDS")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
names <- c("UPN04", "UPN04_LSH")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
setwd("C:/Users/sarac/CDS/CopyNumber/scripts")
source("./CNTiming/R/simulate_functions.R")
setwd("C:/Users/sarac/CDS/CopyNumber/scripts")
source("./CNTiming/R/simulate_functions.R")
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
results$model_selection_tibble
p <- plotting(results$res_best_K,results$input_data,results$best_K)
p
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
results$model_selection_tibble
p <- plotting(results$res_best_K,results$input_data,results$best_K)
p
results$best_K
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
results$model_selection_tibble
p <- plotting(results$res_best_K,results$input_data,results$best_K)
p
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
#names <- c("UPN04","UPN04_LSH")
names <- c("UPN05", "UPN05_LSH")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
results$model_selection_tibble
p <- plotting(results$res_best_K,results$input_data,results$best_K)
p
getwd()
p
ggsave(paste0("./plots/plot_best_K_",names[1],".png"), width = 12, height = 16, device = "png", plot=p)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
results$model_selection_tibble
p <- plotting(results$res_best_K,results$input_data,results$best_K)
p
ggsave(paste0("./plots/plot_best_K_",names[1],".png"), width = 12, height = 16, device = "png", plot=p)
input_data_1 <- prepare_input_data(data, karyo_all, K=1, purity=0.98)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res_1,input_data_1,1)
ggsave(paste0("./plots/plot_inference",names[1],"_1.png"), width = 12, height = 16, device = "png", plot=p_1)
input_data_2 <- prepare_input_data(data, karyo_all, K=2, purity=0.98)
res_2 <- fit_variational(input_data_2, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_2 <- plotting(res_2,input_data_2,2)
ggsave(paste0("./plots/plot_inference",names[2],"_2.png"), width = 12, height = 16, device = "png", plot=p_2)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
#names <- c("UPN04","UPN04_LSH")
names <- c("UPN05", "UPN05_LSH")
input_data_1 <- prepare_input_data(data, karyo_all, K=1, purity=0.98)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res_1,input_data_1,1)
ggsave(paste0("./plots/plot_inference",names[1],"_1.png"), width = 12, height = 16, device = "png", plot=p_1)
input_data_2 <- prepare_input_data(data, karyo_all, K=2, purity=0.98)
res_2 <- fit_variational(input_data_2, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_2 <- plotting(res_2,input_data_2,2)
ggsave(paste0("./plots/plot_inference",names[2],"_2.png"), width = 12, height = 16, device = "png", plot=p_2)
data
data$segment_id
data$j
names <- c("UPN05", "UPN05_LSH")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
input_data_1 <- prepare_input_data(data, karyo_all, K=1, purity=0.98)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res_1,input_data_1,1)
ggsave(paste0("./plots/plot_inference",names[1],"_1.png"), width = 12, height = 16, device = "png", plot=p_1)
input_data_2 <- prepare_input_data(data, karyo_all, K=2, purity=0.98)
res_2 <- fit_variational(input_data_2, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_2 <- plotting(res_2,input_data_2,2)
ggsave(paste0("./plots/plot_inference",names[1],"_2.png"), width = 12, height = 16, device = "png", plot=p_2)
p_2
results$model_selection_tibble
results
accepted_mutations_04 <- readRDS("./results/accepted_mutations.rds")
accepted_mutations_04
accepted_mutations_05 <- readRDS("./results/accepted_mutations.rds")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
getwd()
input_data_1 <- prepare_input_data(data, karyo_all, K=1, purity=0.98)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res_1,input_data_1,1)
ggsave(paste0("./plots/plot_inference",names[1],"_1.png"), width = 12, height = 16, device = "png", plot=p_1)
input_data_2 <- prepare_input_data(data, karyo_all, K=2, purity=0.98)
res_2 <- fit_variational(input_data_2, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_2 <- plotting(res_2,input_data_2,2)
ggsave(paste0("./plots/plot_inference",names[1],"_2.png"), width = 12, height = 16, device = "png", plot=p_2)
accepted_mutations_04 <- readRDS("./results/accepted_mutations.rds")
accepted_mutations_04
data
data$segment_id
data$j
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
data$j
input_data_1 <- prepare_input_data(data, karyo_all, K=1, purity=0.98)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res_1,input_data_1,1)
ggsave(paste0("./plots/plot_inference",names[1],"_1.png"), width = 12, height = 16, device = "png", plot=p_1)
input_data_2 <- prepare_input_data(data, karyo_all, K=2, purity=0.98)
res_2 <- fit_variational(input_data_2, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_2 <- plotting(res_2,input_data_2,2)
ggsave(paste0("./plots/plot_inference",names[1],"_2.png"), width = 12, height = 16, device = "png", plot=p_2)
accepted_mutations_04 <- readRDS("./results/accepted_mutations.rds")
accepted_mutations_04
hist(accepted_mutations_04)
hist(accepted_mutations_04$NV)
hist(accepted_mutations_05$NV)
hist(accepted_mutations_04$NV, breaks = 10)
hist(accepted_mutations_04$NV, breaks = 13)
hist(accepted_mutations_05$NV, breaks = 15)
hist(accepted_mutations_04$NV, breaks = 15)
hist(accepted_mutations_05$NV, breaks = 15)
hist(accepted_mutations_05$NV, breaks = 20)
hist(accepted_mutations_04$NV/accepted_mutations_04$DP, breaks = 15)
hist(accepted_mutations_05$NV/accepted_mutations_05$DP, breaks = 20)
hist(accepted_mutations_04$NV/accepted_mutations_04$DP, breaks = 15)
hist(accepted_mutations_05$NV/accepted_mutations_05$DP, breaks = 20)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
number_events=6
vector_tau<-c(0.01,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.5,0.5) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
plot_data <- data_sim %>%
ggplot(mapping = aes(x=NV/DP, fill=as.factor(j))) +
geom_histogram(alpha=.5, position = "identity")
plot_data <- plot_data + facet_wrap(vars(karyotype, tau, j))
plot_data
ggsave("./plots/data.png", plot=plot_data, width = 12, height = 10, device = "png")
input_data_1 <- prepare_input_data(data_sim, data$karyo, K=1, purity=0.99)
res_1 <- fit_variational(input_data_1, max_attempts = 10, initialization = inits_chain1, INIT = FALSE, initial_iter = 10000)
p_1 <- plotting(res_1,input_data_1,1)
# directly
results <- fit_model_selection_best_K(data_sim, data$karyo, purity)
getwd()
results <- fit_model_selection_best_K(data_sim, data$karyo, purity)
results <- fit_model_selection_best_K(data_sim, data$karyo, purity)
purity=0.99
results <- fit_model_selection_best_K(data_sim, data$karyo, purity)
# directly
results <- fit_model_selection_best_K(data_sim, data$karyo, purity, INIT = FALSE)
results$model_selection_tibble
plotting(results$res_best_K,results$input_data,results$best_K)
ggsave("./plots/plot_inferenc_best_K.png", width = 12, height = 16, device = "png")
#change by plotting the total number of parameters
p<-plot(results$model_selection_tibble$K, results$model_selection_tibble$BIC)
p<-plot(results$model_selection_tibble$K, results$model_selection_tibble$Log_lik)
ggsave("./plots/score_number_parameters.png", width = 12, height = 16, device = "png", plot = p)
p<-plot(results$model_selection_tibble$K, results$model_selection_tibble$Log_lik)
ggsave("./plots/score_number_parameters.png", width = 12, height = 16, device = "png", plot = p)
p
p<-plot(results$model_selection_tibble$K, results$model_selection_tibble$Log_lik)
p
plot(results$model_selection_tibble$K, results$model_selection_tibble$Log_lik)
p <- plot(results$model_selection_tibble$K, results$model_selection_tibble$Log_lik)
p
rm(p)
p <- plot(results$model_selection_tibble$K, results$model_selection_tibble$Log_lik)
